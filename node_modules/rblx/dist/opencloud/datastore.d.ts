import * as Util from '../util';
import { LimitOptions } from '../util';
declare class DataStore {
    #private;
    uid: number;
    name: string;
    scope: string;
    /**
     * Create a new DataStore instance
     * @param {number} uid UniverseId of the DataStore
     * @param {string} name Name of the DataStore
     * @param {string} scope Scope of the DataStore (only usable when calling the DataStore constructor)
     */
    constructor(uid: number, name: string, scope?: string);
    authenticate(apikey: string): void;
    listKeys(limit?: number | LimitOptions, allScopes?: boolean, prefix?: string, cursor?: string): Promise<{
        keys: Util.EntryKey[];
        previousPageCursor: string | null;
        nextPageCursor: string | null;
    } | {
        keys: Util.EntryKey[];
    }>;
    get(key: string): Promise<any>;
    set(key: string, value?: any, exclusiveCreate?: boolean, matchVersion?: string): Promise<Util.EntryVersion>;
    increment(key: string, incrementBy?: number): Promise<Util.EntryVersion>;
    delete(key: string): Promise<any>;
    listVersions(key: string, limit?: number, sortOrder?: 'Ascending' | 'Descending', cursor?: string, startTime?: string, endTime?: string): Promise<{
        versions: Util.EntryVersion[];
        previousPageCursor: string | null;
        nextPageCursor: string | null;
    }>;
    getVersion(key: string, versionId: string): Promise<any>;
}
export default DataStore;
