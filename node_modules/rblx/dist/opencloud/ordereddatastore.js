"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _OrderedDataStore_apikey;
Object.defineProperty(exports, "__esModule", { value: true });
const Util = __importStar(require("../util"));
class OrderedDataStore {
    /**
     * Create a new OrderedDataStore instance
     * @param {number} uid UniverseId of the OrderedDataStore
     * @param {string} name Name of the OrderedDataStore
     * @param {string} scope Scope of the OrderedDataStore (only usable when calling the constructor)
     */
    constructor(uid, name, scope = "global") {
        _OrderedDataStore_apikey.set(this, void 0);
        this.scope = "global";
        this.uid = uid;
        this.name = name;
        this.scope = scope;
    }
    authenticate(apikey) {
        __classPrivateFieldSet(this, _OrderedDataStore_apikey, apikey, "f");
    }
    listEntries(maxPageSize, cursor, order, filter) {
        return __awaiter(this, void 0, void 0, function* () {
            let url = Util.URIs.OrderedDataStore + `/${this.uid}/orderedDataStores/${this.name}/scopes/${this.scope}/entries` + Util.populateQuery({
                max_page_size: maxPageSize,
                page_token: cursor,
                order_by: order === 1 ? 'desc' : undefined,
                filter: filter
            });
            let res = yield Util.octokit(url, {}, {
                method: 'GET',
                headers: {
                    'x-api-key': __classPrivateFieldGet(this, _OrderedDataStore_apikey, "f")
                }
            });
            if (res.status === 200) {
                let entries = res.data.entries;
                let cursor = res.data.nextPageToken;
                let rt = {
                    cursor: cursor,
                    entries: entries,
                };
                return rt;
            }
            else {
                console.error(res.status, res.statusText);
            }
        });
    }
    createEntry(id, value) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof id !== 'string')
                throw new Error("Id must be a string!");
            let url = Util.URIs.OrderedDataStore + `/${this.uid}/orderedDataStores/${this.name}/scopes/${this.scope}/entries` + Util.populateQuery({
                id: id
            });
            let res = yield Util.octokit(url, {}, {
                method: 'POST',
                body: {
                    value: value
                },
                headers: {
                    'Content-Type': 'application/json',
                    'x-api-key': __classPrivateFieldGet(this, _OrderedDataStore_apikey, "f"),
                }
            });
            if (res.status === 200) {
                let rt = res.data;
                return rt;
            }
            else {
                console.error(res.status, res.statusText);
            }
        });
    }
    getEntry(id) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof id !== 'string')
                throw new Error("Id must be a string!");
            let url = Util.URIs.OrderedDataStore + `/${this.uid}/orderedDataStores/${this.name}/scopes/${this.scope}/entries/${id}`;
            let res = yield Util.octokit(url, {}, {
                method: 'GET',
                headers: {
                    'x-api-key': __classPrivateFieldGet(this, _OrderedDataStore_apikey, "f"),
                }
            });
            if (res.status === 200) {
                let rt = res.data;
                return rt;
            }
            else {
                console.error(res.status, res.statusText);
            }
        });
    }
    deleteEntry(id) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof id !== 'string')
                throw new Error("Id must be a string!");
            let url = Util.URIs.OrderedDataStore + `/${this.uid}/orderedDataStores/${this.name}/scopes/${this.scope}/entries/${id}`;
            let res = yield Util.octokit(url, {}, {
                method: 'DELETE',
                headers: {
                    'x-api-key': __classPrivateFieldGet(this, _OrderedDataStore_apikey, "f"),
                }
            });
            if (res.status === 200) {
                return true;
            }
            else {
                console.error(res.status, res.statusText);
            }
        });
    }
    updateEntry(id, value, allowMissing = true) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof id !== 'string')
                throw new Error("Id must be a string!");
            if (typeof value !== 'number')
                throw new Error("Value must be a number!");
            let url = Util.URIs.OrderedDataStore + `/${this.uid}/orderedDataStores/${this.name}/scopes/${this.scope}/entries/${id}` + Util.populateQuery({
                allow_missing: allowMissing
            });
            let res = yield Util.octokit(url, {}, {
                method: 'PATCH',
                body: {
                    value: value
                },
                headers: {
                    'Content-Type': 'application/json',
                    'x-api-key': __classPrivateFieldGet(this, _OrderedDataStore_apikey, "f"),
                }
            });
            if (res.status === 200) {
                let rt = res.data;
                return rt;
            }
            else {
                console.error(res.status, res.statusText);
            }
        });
    }
    incrementEntry(id, amount) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof id !== 'string')
                throw new Error("Id must be a string!");
            if (typeof amount !== 'number')
                throw new Error("Value must be a number!");
            let url = Util.URIs.OrderedDataStore + `/${this.uid}/orderedDataStores/${this.name}/scopes/${this.scope}/entries/${id}:increment`;
            let res = yield Util.octokit(url, {}, {
                method: 'POST',
                body: {
                    amount: amount
                },
                headers: {
                    'Content-Type': 'application/json',
                    'x-api-key': __classPrivateFieldGet(this, _OrderedDataStore_apikey, "f"),
                }
            });
            if (res.status === 200) {
                let rt = res.data;
                return rt;
            }
            else {
                console.error(res.status, res.statusText);
            }
        });
    }
}
_OrderedDataStore_apikey = new WeakMap();
exports.default = OrderedDataStore;
