"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _AssetManager_apikey;
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const form_data_1 = __importDefault(require("form-data"));
const Util = __importStar(require("../util"));
const axios_1 = __importDefault(require("axios"));
const ContentTypes = {
    Audio: {
        mp3: 'audio/mp3',
        ogg: 'audio/ogg'
    },
    Decal: {
        png: 'image/png',
        jpeg: 'image/jpeg',
        bmp: 'image/bmp',
        tga: 'image/tga',
    },
    Model: {
        fbx: 'model/fbx'
    }
};
class AssetManager {
    /**
     * Create a new AssetManager
     * @param {number} id UserId or GroupId of the AssetManager
     * @param {number} isGroup Whether this AssetManager is for a User or Group
     */
    constructor(id, isGroup = false) {
        _AssetManager_apikey.set(this, void 0);
        this.id = id;
        this.isGroup = isGroup;
    }
    /**
     * Create a new AssetManager for a User
     * @param {number} userId UserId of the AssetManager
     */
    static User(userId) {
        return new AssetManager(userId);
    }
    /**
     * Create a new AssetManager for a Group
     * @param {number} groupId GroupId of the AssetManager
     */
    static Group(groupId) {
        return new AssetManager(groupId, true);
    }
    authenticate(apikey) {
        __classPrivateFieldSet(this, _AssetManager_apikey, apikey, "f");
    }
    createAsset(assetType, filePath, name, desc = "Description") {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof assetType !== 'string')
                throw new Error("AssetType must be specified!");
            if (typeof name !== 'string')
                throw new Error("Name must be a string!");
            if (typeof filePath !== 'string')
                throw new Error("File path must be a string!");
            let split = filePath.includes('\\') ? filePath.split('\\') : filePath.split('/');
            let fNameExt = split[split.length - 1];
            let creator = this.isGroup ? {
                groupId: this.id.toString()
            } : {
                userId: this.id.toString()
            };
            let fileContent = fs_1.default.readFileSync(filePath);
            let reqData = {
                assetType: assetType,
                creationContext: {
                    creator: creator
                },
                description: desc,
                displayName: name,
            };
            const form = new form_data_1.default();
            form.append("request", JSON.stringify(reqData));
            form.append("fileContent", fileContent, fNameExt);
            const res = yield axios_1.default.post('https://apis.roblox.com/assets/v1/assets', form, {
                headers: Object.assign(Object.assign({}, form.getHeaders()), { 'x-api-key': __classPrivateFieldGet(this, _AssetManager_apikey, "f") }),
                validateStatus: () => true,
            });
            if (res.status === 200) {
                let rt = res.data;
                rt.operationId = rt.path.split('/')[1];
                return rt;
            }
            else {
                if (res.data.message === 'AssetName is moderated.')
                    throw new Error(`The name ${name} was moderated by Roblox!`);
                console.error(res.status, res.statusText);
            }
        });
    }
    getOperation(id) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof id !== 'string')
                throw new Error("Operation id must be specified!");
            let url = Util.URIs.Asset + `/operations/${id}`;
            let res = yield Util.octokit(url, {}, {
                method: 'GET',
                headers: {
                    'x-api-key': __classPrivateFieldGet(this, _AssetManager_apikey, "f")
                }
            });
            if (res.status === 200) {
                let rt = res.data;
                return rt;
            }
            else {
                console.error(res.status, res.statusText);
            }
        });
    }
    updateAsset(assetId, filePath) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof assetId !== 'number')
                throw new Error("AssetId must be a number!");
            if (typeof filePath !== 'string')
                throw new Error("File path must be a string!");
            let split = filePath.includes('\\') ? filePath.split('\\') : filePath.split('/');
            let fNameExt = split[split.length - 1];
            let fileContent = fs_1.default.readFileSync(filePath);
            let reqData = {
                assetId: assetId
            };
            let form = new form_data_1.default();
            form.append("request", JSON.stringify(reqData));
            form.append('fileContent', fileContent, fNameExt);
            const res = yield axios_1.default.patch('https://apis.roblox.com/assets/v1/assets', form, {
                headers: Object.assign(Object.assign({}, form.getHeaders()), { 'x-api-key': __classPrivateFieldGet(this, _AssetManager_apikey, "f") }),
                validateStatus: () => true,
            });
            if (res.status === 200) {
                let rt = res.data;
                return rt;
            }
            else {
                console.log("Only Models can be updated at this time!");
                console.error(res);
            }
        });
    }
}
_AssetManager_apikey = new WeakMap();
exports.default = AssetManager;
