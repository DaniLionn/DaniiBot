"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _DataStore_apikey;
Object.defineProperty(exports, "__esModule", { value: true });
const crypto_1 = __importDefault(require("crypto"));
const Util = __importStar(require("../util"));
class DataStore {
    /**
     * Create a new DataStore instance
     * @param {number} uid UniverseId of the DataStore
     * @param {string} name Name of the DataStore
     * @param {string} scope Scope of the DataStore (only usable when calling the DataStore constructor)
     */
    constructor(uid, name, scope = "global") {
        _DataStore_apikey.set(this, void 0);
        this.scope = "global";
        this.uid = uid;
        this.name = encodeURIComponent(name);
        this.scope = scope;
    }
    // @WONTFIX No method for retrieving the API Key
    authenticate(apikey) {
        __classPrivateFieldSet(this, _DataStore_apikey, apikey, "f");
    }
    listKeys(limit, allScopes, prefix, cursor) {
        return __awaiter(this, void 0, void 0, function* () {
            if (limit === undefined || typeof (limit) === 'number' || !limit.useV2Limit) {
                let url = Util.URIs.DataStore + `/${this.uid}/standard-datastores/datastore/entries` + Util.populateQuery({
                    datastoreName: this.name,
                    scope: this.scope,
                    limit: typeof (limit) === 'number' || typeof (limit) == "undefined" ? limit : limit.limit,
                    allScopes: allScopes,
                    prefix: prefix,
                    cursor: cursor
                });
                let res = yield Util.octokit(url, {}, {
                    method: 'GET',
                    headers: {
                        'x-api-key': __classPrivateFieldGet(this, _DataStore_apikey, "f")
                    }
                });
                if (res.status === 200) {
                    let previousCursor = res.data.previousPageCursor;
                    let nextCursor = res.data.nextPageCursor;
                    let rt = {
                        keys: res.data.keys,
                        previousPageCursor: previousCursor,
                        nextPageCursor: nextCursor
                    };
                    return rt;
                }
                else {
                    console.error(res.status, res.statusText);
                }
            }
            else if (limit.useV2Limit && limit.limit > 0) {
                let keys = [];
                let nextCursor;
                while (keys.length < limit.limit) {
                    let url = Util.URIs.DataStore + `/${this.uid}/standard-datastores/datastore/entries` + Util.populateQuery({
                        datastoreName: this.name,
                        scope: this.scope,
                        limit: 100,
                        allScopes: allScopes,
                        prefix: prefix,
                        cursor: nextCursor
                    });
                    let res = yield Util.octokit(url, {}, {
                        method: 'GET',
                        headers: {
                            'x-api-key': __classPrivateFieldGet(this, _DataStore_apikey, "f")
                        }
                    });
                    if (res.status === 200 && res.data.keys) {
                        res.data.keys.forEach((key) => {
                            keys.push(key);
                        });
                        if (!res.data.nextPageCursor) {
                            break;
                        }
                        nextCursor = res.data.nextPageCursor;
                    }
                    else {
                        console.error(res.status, res.statusText);
                    }
                }
                return {
                    keys: keys
                };
            }
            else if (limit.limit <= 0) {
                console.error("If you provide a limit, you must set it greater than 0!");
            }
        });
    }
    get(key) {
        return __awaiter(this, void 0, void 0, function* () {
            let url = Util.URIs.DataStore + `/${this.uid}/standard-datastores/datastore/entries/entry` + Util.populateQuery({
                datastoreName: this.name,
                scope: this.scope,
                entryKey: key
            });
            let res = yield Util.octokit(url, {}, {
                method: 'GET',
                headers: {
                    'x-api-key': __classPrivateFieldGet(this, _DataStore_apikey, "f")
                }
            });
            if (res.status === 200) {
                return res.data;
            }
            else if (res.status === 204) {
                return {
                    level: Util.ErrLevel.Warning,
                    message: `Key ${key} is marked as removed/deleted`
                };
            }
            else {
                console.error(res.status, res.statusText);
            }
        });
    }
    set(key, value = null, exclusiveCreate, matchVersion) {
        return __awaiter(this, void 0, void 0, function* () {
            let jsonData = JSON.stringify(value);
            let checksum = crypto_1.default.createHash('md5').update(jsonData).digest('base64');
            // console.log(key, value);
            // console.log(jsonData);
            // console.log(checksum);
            let url = Util.URIs.DataStore + `/${this.uid}/standard-datastores/datastore/entries/entry` + Util.populateQuery({
                datastoreName: this.name,
                scope: this.scope === 'global' ? undefined : this.scope,
                entryKey: key,
                exclusiveCreate: exclusiveCreate,
                matchVersion: !exclusiveCreate ? matchVersion : undefined
            });
            // const headers = {
            // 	'x-api-key': this.#apikey,
            // 	'content-type': 'application/json',
            // 	'content-md5': checksum,
            // 	'roblox-entry-userids': '[]',
            // 	'roblox-entry-attributes': JSON.stringify({})
            // }
            // console.log(JSON.stringify(headers));
            let res = yield Util.octokit(url, {}, {
                method: 'POST',
                body: jsonData,
                headers: {
                    'x-api-key': __classPrivateFieldGet(this, _DataStore_apikey, "f"),
                    'content-type': 'application/json',
                    // 'Content-Type': 'application/json; charset=UTF-8',
                    'content-md5': checksum,
                    // 'roblox-entry-userids': JSON.stringify([]),
                    // 'roblox-entry-attributes': JSON.stringify({})
                }
            });
            if (res.status === 200) {
                return res.data;
            }
            else {
                console.error(res.status, res.statusText);
            }
        });
    }
    increment(key, incrementBy = 1) {
        return __awaiter(this, void 0, void 0, function* () {
            // let jsonData = JSON.stringify(value);
            // let checksum = crypto.createHash('md5').update(jsonData).digest('base64');
            let url = Util.URIs.DataStore + `/${this.uid}/standard-datastores/datastore/entries/entry/increment` + Util.populateQuery({
                datastoreName: this.name,
                scope: this.scope === 'global' ? undefined : this.scope,
                entryKey: key,
                incrementBy: incrementBy
            });
            let res = yield Util.octokit(url, {}, {
                method: 'POST',
                body: {},
                headers: {
                    'x-api-key': __classPrivateFieldGet(this, _DataStore_apikey, "f"),
                    'content-type': 'application/json',
                    'content-length': '0',
                    // 'Content-Type': 'application/json; charset=UTF-8',
                    // 'content-md5': checksum,
                    // 'roblox-entry-userids': JSON.stringify([]),
                    // 'roblox-entry-attributes': JSON.stringify({})
                }
            });
            if (res.status === 200) {
                return res.data;
            }
            else {
                console.error(res.status, res.statusText);
            }
        });
    }
    delete(key) {
        return __awaiter(this, void 0, void 0, function* () {
            let url = Util.URIs.DataStore + `/${this.uid}/standard-datastores/datastore/entries/entry` + Util.populateQuery({
                datastoreName: this.name,
                scope: this.scope === 'global' ? undefined : this.scope,
                entryKey: key
            });
            let res = yield Util.octokit(url, {}, {
                method: 'DELETE',
                headers: {
                    'x-api-key': __classPrivateFieldGet(this, _DataStore_apikey, "f")
                }
            });
            if (res.status === 204) {
                return res.data;
            }
            else {
                console.error(res.status, res.statusText);
            }
        });
    }
    listVersions(key, limit = 1, sortOrder = 'Ascending', cursor, startTime, endTime) {
        return __awaiter(this, void 0, void 0, function* () {
            let url = Util.URIs.DataStore + `/${this.uid}/standard-datastores/datastore/entries/entry/versions` + Util.populateQuery({
                datastoreName: this.name,
                scope: this.scope === 'global' ? undefined : this.scope,
                entryKey: key,
                limit: limit,
                sortOrder: sortOrder,
                cursor: cursor,
                startTime: startTime,
                endTime: endTime
            });
            let res = yield Util.octokit(url, {}, {
                method: 'GET',
                headers: {
                    'x-api-key': __classPrivateFieldGet(this, _DataStore_apikey, "f")
                }
            });
            if (res.status === 200) {
                let rt = {
                    versions: res.data.versions,
                    previousPageCursor: res.data.previousPageCursor,
                    nextPageCursor: res.data.nextPageCursor
                };
                return rt;
            }
            else {
                console.error(res.status, res.statusText);
            }
        });
    }
    getVersion(key, versionId) {
        return __awaiter(this, void 0, void 0, function* () {
            let url = Util.URIs.DataStore + `/${this.uid}/standard-datastores/datastore/entries/entry/versions/version` + Util.populateQuery({
                datastoreName: this.name,
                scope: this.scope === 'global' ? undefined : this.scope,
                entryKey: key,
                versionId: versionId
            });
            let res = yield Util.octokit(url, {}, {
                method: 'GET',
                headers: {
                    'x-api-key': __classPrivateFieldGet(this, _DataStore_apikey, "f")
                }
            });
            if (res.status === 200) {
                return res.data;
            }
            else if (res.status === 204) {
                return {
                    level: Util.ErrLevel.Warning,
                    message: `Key ${key} is marked as removed/deleted`
                };
            }
            else {
                console.error(res.status, res.statusText);
            }
        });
    }
}
_DataStore_apikey = new WeakMap();
exports.default = DataStore;
