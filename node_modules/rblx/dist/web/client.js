"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("../util");
class Client {
    constructor() {
        this.http = new util_1.Http();
    }
    acceptRequest(userId) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!Number(userId)) {
                throw new Error("Invalid userId");
            }
            return yield this.http.request('POST', `https://friends.roblox.com/v1/users/${userId}/accept-friend-request`, {})
                .then((response) => { return response; })
                .catch((error) => (0, util_1.err)(error));
        });
    }
    acceptTrade(tradeId) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!Number(tradeId)) {
                throw new Error("Invalid tradeId");
            }
            return yield this.http.request('POST', `https://trades.roblox.com/v1/trades/${tradeId}/accept`, {
                tradeId: tradeId
            })
                .then((response) => { return response; })
                .catch((error) => (0, util_1.err)(error));
        });
    }
    addFriend(userId) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!Number(userId)) {
                throw new Error("Invalid userId");
            }
            return yield this.http.request('POST', `https://friends.roblox.com/v1/users/${userId}/request-friendship`, {
                friendshipRequestModel: {
                    friendshipOriginSourceType: "Unknown"
                }
            })
                .then((response) => { return response.success; })
                .catch((error) => (0, util_1.err)(error));
        });
    }
    block(userId) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!Number(userId)) {
                throw new Error("Invalid userId");
            }
            return yield this.http.request('POST', `https://accountsettings.roblox.com/v1/users/${userId}/block`, {})
                .then((response) => { return response; })
                .catch((error) => (0, util_1.err)(error));
        });
    }
    canTradeWith(userId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.get(`https://trades.roblox.com/v1/users/${userId}/can-trade-with`)
                .then((response) => { return response.canTrade; })
                .catch((error) => (0, util_1.err)(error));
        });
    }
    claimOwnership(groupId) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!Number(groupId)) {
                throw new Error("Invalid groupId");
            }
            return yield this.http.request('POST', `https://groups.roblox.com/v1/groups/${groupId}/claim-ownership`, {})
                .then((response) => { return response; })
                .catch((error) => (0, util_1.err)(error));
        });
    }
    counterTrade(tradeId, offers) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.request('POST', `https://trades.roblox.com/v1/trades/${tradeId}/counter`, {
                offers: offers
            })
                .then((response) => { return response.id; })
                .catch((error) => (0, util_1.err)(error));
        });
    }
    declineAllRequests() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.request('POST', 'https://friends.roblox.com/v1/user/friend-requests/decline-all', {})
                .then((response) => { return response; })
                .catch((error) => (0, util_1.err)(error));
        });
    }
    declineRequest(userId) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!Number(userId)) {
                throw new Error("Invalid userId");
            }
            return yield this.http.request('POST', `https://friends.roblox.com/v1/users/${userId}/decline-friend-request`, {})
                .then((response) => { return response; })
                .catch((error) => (0, util_1.err)(error));
        });
    }
    declineTrade(tradeId) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!Number(tradeId)) {
                throw new Error("Invalid tradeId");
            }
            return yield this.http.request('POST', `https://trades.roblox.com/v1/trades/${tradeId}/decline`, {
                tradeId: tradeId
            })
                .then((response) => { return response; })
                .catch((error) => (0, util_1.err)(error));
        });
    }
    getBirthdate() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.get('https://accountinformation.roblox.com/v1/birthdate')
                .then((response) => { return response; })
                .catch((error) => (0, util_1.err)(error));
        });
    }
    getConsecutiveLoginDays() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.get('https://accountinformation.roblox.com/v1/xbox-live/consecutive-login-days')
                .then((response) => { return response.count; })
                .catch((error) => (0, util_1.err)(error));
        });
    }
    getDescription() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.get('https://accountinformation.roblox.com/v1/description')
                .then((response) => { return response.description; })
                .catch((error) => (0, util_1.err)(error));
        });
    }
    getDisplayName() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.get('https://users.roblox.com/v1/users/authenticated')
                .then((response) => { return response.displayName; })
                .catch((error) => (0, util_1.err)(error));
        });
    }
    getFriendCount() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.get('https://friends.roblox.com/v1/my/friends/count')
                .then((response) => { return response.count; })
                .catch((error) => (0, util_1.err)(error));
        });
    }
    getFriendRequests() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.get('https://friends.roblox.com/v1/my/friends/requests?fetchMutualFriends=true&sortOrder=Desc&limit=100')
                .then((response) => {
                let requests = [];
                response.data.forEach(element => {
                    if (element.isBanned) {
                        return;
                    }
                    requests.push({
                        displayName: element.displayName,
                        username: element.username,
                        userId: element.id,
                    });
                });
                return requests;
            })
                .catch((error) => (0, util_1.err)(error));
        });
    }
    getFriendRequestsCount() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.get('https://friends.roblox.com/v1/user/friend-requests/count')
                .then((response) => { return response.count; })
                .catch((error) => (0, util_1.err)(error));
        });
    }
    getGender() {
        return __awaiter(this, void 0, void 0, function* () {
            let map = {
                '1': 'other',
                '2': 'male',
                '3': 'female'
            };
            return yield this.http.get('https://accountinformation.roblox.com/v1/gender')
                .then((response) => { return map[response.gender.toString()]; })
                .catch((error) => (0, util_1.err)(error));
        });
    }
    getLocale() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.get('https://locale.roblox.com/v1/locales/user-locale')
                .then((response) => { var _a; return (_a = response.supportedLocale) === null || _a === void 0 ? void 0 : _a.locale; })
                .catch((error) => (0, util_1.err)(error));
        });
    }
    getPhone() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.get('https://accountinformation.roblox.com/v1/phone')
                .then((response) => { return response.phone; })
                .catch((error) => (0, util_1.err)(error));
        });
    }
    getPromotionChannels() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.get('https://accountinformation.roblox.com/v1/promotion-channels')
                .then((response) => { return { facebook: response.facebook, twitter: response.twitter, youtube: response.youtube, twitch: response.twitch, privacy: response.promotionChannelsVisibilityPrivacy }; })
                .catch((error) => (0, util_1.err)(error));
        });
    }
    getStatus() {
        return __awaiter(this, void 0, void 0, function* () {
            let userId = this.getUserId();
            return yield this.http.get(`https://users.roblox.com/v1/users/${userId}/status`)
                .then((response) => { return response.status; })
                .catch((error) => (0, util_1.err)(error));
        });
    }
    getTrade(tradeId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.get(`https://trades.roblox.com/v1/trades/${tradeId}`)
                .then((response) => { return response; })
                .catch((error) => (0, util_1.err)(error));
        });
    }
    getTrades(tradeStatusType = util_1.TradeStatus.Inbound) {
        return __awaiter(this, void 0, void 0, function* () {
            // let map = {
            // 	"0": "Completed",
            // 	"1": "Inactive",
            // 	"2": "Inbound",
            // 	"3": "Outbound"
            // };
            return yield this.http.get(`https://trades.roblox.com/v1/trades/${tradeStatusType}?sortOrder=Asc&limit=100`)
                .then((response) => { return response.data; })
                .catch((error) => (0, util_1.err)(error));
        });
    }
    getTradesCount(tradeStatusType = util_1.TradeStatus.Inbound) {
        return __awaiter(this, void 0, void 0, function* () {
            let map = {
                "0": "Completed",
                "1": "Inactive",
                "2": "Inbound",
                "3": "Outbound"
            };
            return yield this.http.get(`https://trades.roblox.com/v1/trades/${tradeStatusType}/count`)
                .then((response) => { return response.count; })
                .catch((error) => (0, util_1.err)(error));
        });
    }
    getUserId() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.get('https://users.roblox.com/v1/users/authenticated')
                .then((response) => { return response.id; })
                .catch((error) => (0, util_1.err)(error));
        });
    }
    getUsername() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.get('https://users.roblox.com/v1/users/authenticated')
                .then((response) => { return response.name; })
                .catch((error) => (0, util_1.err)(error));
        });
    }
    isFollowing(userId) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!Number(userId)) {
                throw new Error("Invalid userId");
            }
            return yield this.http.request('POST', `https://friends.roblox.com/v1/user/following-exists`, {
                targetUserIds: [userId]
            })
                .then((response) => {
                for (let index = 0; index < response.followings.length; index++) {
                    const following = response.followings[index];
                    if (following.isFollowing && following.userId == userId) {
                        return true;
                    }
                }
                return false;
            })
                .catch((error) => (0, util_1.err)(error));
        });
    }
    removeFriend(userId) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!Number(userId)) {
                throw new Error("Invalid userId");
            }
            return yield this.http.request('POST', `https://friends.roblox.com/v1/users/${userId}/unfriend`, {})
                .then((response) => { return response; })
                .catch((error) => (0, util_1.err)(error));
        });
    }
    removePrimaryGroup() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.delete(`https://groups.roblox.com/v1/user/groups/primary`)
                .then((response) => { return response; })
                .catch((error) => (0, util_1.err)(error));
        });
    }
    sendTrade(offers) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.request('POST', `https://trades.roblox.com/v1/trades/send`, {
                offers: offers
            })
                .then((response) => { return response.id; })
                .catch((error) => (0, util_1.err)(error));
        });
    }
    setBirthdate(birthdate) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.request('POST', `https://accountinformation.roblox.com/v1/birthdate`, {
                birthMonth: birthdate.birthMonth,
                birthDay: birthdate.birthDay,
                birthYear: birthdate.birthYear
            })
                .then((response) => { return response; })
                .catch((error) => (0, util_1.err)(error));
        });
    }
    setDescription(description) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.request('POST', 'https://accountinformation.roblox.com/v1/description', {
                description: description
            })
                .then((response) => { return response.description; })
                .catch((error) => (0, util_1.err)(error));
        });
    }
    setDisplayName(displayName) {
        return __awaiter(this, void 0, void 0, function* () {
            let userId = this.getUserId();
            return yield this.http.get(`https://users.roblox.com/v1/users/${userId}/display-names/validate?displayName=${displayName}`)
                .then(() => __awaiter(this, void 0, void 0, function* () {
                return yield this.http.request('POST', `https://users.roblox.com/v1/users/${userId}/display-names`, {
                    newDIsplayName: displayName
                })
                    .then((response) => { return response; })
                    .catch((error) => (0, util_1.err)(error));
            }))
                .catch((error) => (0, util_1.err)(error));
        });
    }
    setGender(gender) {
        return __awaiter(this, void 0, void 0, function* () {
            // No non-binary, read hover/JSDoc for Gender type
            let map = {
                '0': 'male',
                '1': 'female',
            };
            return yield this.http.request('POST', 'https://accountinformation.roblox.com/v1/gender', {
                gender: map[gender.toString()]
            })
                .then((response) => { return response; })
                .catch((error) => (0, util_1.err)(error));
        });
    }
    setPrimaryGroup(groupId) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!Number(groupId)) {
                throw new Error("Invalid groupId");
            }
            return yield this.http.request('POST', `https://groups.roblox.com/v1/user/groups/primary`, {
                groupId: groupId
            })
                .then((response) => { return response; })
                .catch((error) => (0, util_1.err)(error));
        });
    }
    setPromotionChannels(tbl, privacy) {
        return __awaiter(this, void 0, void 0, function* () {
            let socials = yield this.getPromotionChannels();
            return yield this.http.request('POST', 'https://accountinformation.roblox.com/v1/promotion-channels', {
                facebook: tbl['facebook'] || socials['facebook'] || "",
                twitter: tbl['twitter'] || socials['twitter'] || "",
                youtube: tbl['youtube'] || socials['youtube'] || "",
                twitch: tbl['twitch'] || socials['twitch'] || "",
                promotionChannelsVisibilityPrivacy: privacy.toString() || util_1.PromotionChannelPrivacy[socials['privacy'].toUpperCase() || "NoOne"]
            })
                .then((response) => { return response; })
                .catch((error) => (0, util_1.err)(error));
        });
    }
    setStatus(status) {
        return __awaiter(this, void 0, void 0, function* () {
            let userId = this.getUserId();
            return yield this.http.request(`PATCH`, `https://users.roblox.com/v1/users/${userId}/status`, {
                status: status
            })
                .then((response) => { return response.status; })
                .catch((error) => (0, util_1.err)(error));
        });
    }
    login(token) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.http.setToken(token)
                .then((response) => { return response; })
                .catch((error) => (0, util_1.err)(error));
        });
    }
    unblock(userId) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!Number(userId)) {
                throw new Error("Invalid userId");
            }
            return yield this.http.request('POST', `https://accountsettings.roblox.com/v1/users/${userId}/unblock`, {})
                .then((response) => { return response; })
                .catch((error) => (0, util_1.err)(error));
        });
    }
}
exports.default = Client;
