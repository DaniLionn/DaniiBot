import { Http, PromotionChannelPrivacy, Birthdate, Gender, TradeOffer, TradeStatus } from '../util';
declare class Client {
    http: Http;
    constructor();
    acceptRequest(userId: number): Promise<any>;
    acceptTrade(tradeId: number): Promise<any>;
    addFriend(userId: number): Promise<any>;
    block(userId: number): Promise<any>;
    canTradeWith(userId: number): Promise<any>;
    claimOwnership(groupId: number): Promise<any>;
    counterTrade(tradeId: number, offers: TradeOffer[]): Promise<any>;
    declineAllRequests(): Promise<any>;
    declineRequest(userId: number): Promise<any>;
    declineTrade(tradeId: number): Promise<any>;
    getBirthdate(): Promise<any>;
    getConsecutiveLoginDays(): Promise<any>;
    getDescription(): Promise<any>;
    getDisplayName(): Promise<any>;
    getFriendCount(): Promise<any>;
    getFriendRequests(): Promise<void | any[]>;
    getFriendRequestsCount(): Promise<any>;
    getGender(): Promise<any>;
    getLocale(): Promise<any>;
    getPhone(): Promise<any>;
    getPromotionChannels(): Promise<void | {
        facebook: any;
        twitter: any;
        youtube: any;
        twitch: any;
        privacy: any;
    }>;
    getStatus(): Promise<any>;
    getTrade(tradeId: number): Promise<any>;
    getTrades(tradeStatusType?: TradeStatus): Promise<any>;
    getTradesCount(tradeStatusType?: TradeStatus): Promise<any>;
    getUserId(): Promise<any>;
    getUsername(): Promise<any>;
    isFollowing(userId: number): Promise<boolean | void>;
    removeFriend(userId: number): Promise<any>;
    removePrimaryGroup(): Promise<any>;
    sendTrade(offers: TradeOffer[]): Promise<any>;
    setBirthdate(birthdate: Birthdate): Promise<any>;
    setDescription(description: string): Promise<any>;
    setDisplayName(displayName: string): Promise<any>;
    setGender(gender: Gender): Promise<any>;
    setPrimaryGroup(groupId: number): Promise<any>;
    setPromotionChannels(tbl: {
        [key: string]: string;
    }, privacy: PromotionChannelPrivacy): Promise<any>;
    setStatus(status: string): Promise<any>;
    login(token: string): Promise<any>;
    unblock(userId: number): Promise<any>;
}
export default Client;
